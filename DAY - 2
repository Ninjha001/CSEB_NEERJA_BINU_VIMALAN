Q1.Happy number program

#include <stdio.h>    
     
int Happy(int num){    
    int rem = 0, sum = 0;    
        
    while(num > 0){    
        rem = num%10;    
        sum = sum + (rem*rem);    
        num = num/10;    
    }    
    return sum;    
}    
        
int main()    
{    
    int num = 9;    
    int result = num;    
        
    while(result != 1 && result != 4){    
        result = Happy(result);    
    }    
    if(result == 1)    
        printf("%d is a happy number", num);    
    else if(result == 4)    
        printf("%d is not a happy number", num);     
     
    return 0;    
}  

Q2.Find the outputs for the following code snippets

  (a)
      #include<stdio.h>
      int main()
      {
        int n;
        for(n=3;n!=0;n--)
        {
          printf("%d",n);
          n=n-1;
        }
        return 0;
      }
      //infinite loop.

  (b)
      for a=8,b=9
      function(input a, input b)
      if(a<b)
        return function(b,a);
      else if(b!=0)
        return (a+function(a,b-1))
      else 
        return 0;
      //output is 72.

  (c) 
      #include<stdio.h>

      int main()
      {
        int a=10,b=20;
        b = (a+b)-(a=b);
        printf("%d",a);
        printf("%d",b);
        return 0;
      }
      //a=20,b=10

  (d)
      #include<stdio.h>

      int main()
      {
        int a=1,b=0;
        b = ++a + ++a;
        printf("%d",a);
        printf("%d",b);
        return 0;
      }
      //The answer depends on the compiler. But in general the answer is a=3 b=5

  (e)
      #include<stdio.h>

      int main()
      {
        int a[10] = {1,2,3,4,5,6,7,8,9,10};
        printf(*a+1-*a+3);
        return 0;
      }
      //The result is -1

  (f)
      #include<stdio.h>

      int main()
      {
        int n=5,num=1;
        while(num<=n)
        {
          if(num%2 == 1)
            printf("%d",num);
          num=num+1;
        }
        return 0;
      }
      //1 3 5

  (g)
      #include<stdio.h>

      int main()
      {
        int n=5,num=1;
        while(num=2*n)
        {
          if(num%2 == 1)
            printf("%d",num);
          num=num+1;
        }
        return 0;
      }
      //infinite loop.
    
Q3. Read 1D array. Fnd the sum of the array and check if it is prime or not.

#include<stdio.h>
#include<stdlib.h>

int main()
{
  int i;
  int sum=0;
  int flag=0;
  int arr[5];
  for(i=0;i<5;i++)
  {
      scanf("%d\n",&arr[i]);
      sum+=arr[i];
  }
  printf("%d",sum);
  for(i=2;i<sum/2;i++)
  {
      if(sum%i==0)
      {
         flag++;
         break;
      }
  }
  printf("\n");
  if(flag!=0)
   printf("The sum is not prime\n");
  else
  {
   printf("The sum is prime\n");
  }
}

Q4.Reverse a 1D array and replace 0 with $.

#include <stdio.h>

#define SIZE 10

int main() {
    int arr[SIZE] = {1, 2, 3, 0, 5, 0, 7, 8, 0, 10};  // input array
    int i, temp;
 
    for (i = 0; i < SIZE / 2; i++) {
        temp = arr[i];
        arr[i] = arr[SIZE - i - 1];
        arr[SIZE - i - 1] = temp;
    }
    
    for (i = 0; i < SIZE; i++) {
        if (arr[i] == 0) {
            arr[i] = '$';
        }
    }
    
    for (i = 0; i < SIZE; i++) {
        printf("%d ", arr[i]);
    }
    
    return 0;
}

Pointers

A powerful concept using which program can access memory directly.
Default memory - stack

use of pointers:
->arrays,stringd,functions
->dynamic memory
->optimisation
->make prgm fast
->use less memory

Example 1:

int * ptr;
int a =5;
ptr=&a;

printf("address of a direct %p",&a);
printf("address of a using pointer %p",ptr);
printf("value of a direct %d",a);
printf("value of a using pointer %d",*ptr);

Example 2:

int a,b,sum;
a=100;
b=200;
int *p1,*p2;
p1=&a;
p2=&b;
sum=*p1 + *p2;
printf("%d",sum);
// 300 

Example 3:

int a,b,temp;
a=100;
b=200;
int *p1,*p2;
p1=&a;
p2=&b;
temp = *p2;
*p2 = *p1;
*p1 = temp;
printf("%d",*p1);
printf("%d",*p2);
// p1=200 p2=100

Pointers arithmetic
->In terms of address
p1+p2 - invalid
p1-p2 - valid
p1++  - valid
--p1  - valid
p1*p2 - invalid
p1/p2 - invalid
p1%p2 - invalid

->In terms of value
+ * % - are all valid
p1/p2 is not valid until we provide spaces between the expressions. 

Types of pointers:
->Double pointers
->Constant poiners
->Dangling pointers

DOUBLE POINTERS : a pointer stores the address of another pointer.
int *p1;
int a =5;
p1 = &a;
int ** p2;
p2 = &p1;

//ASSIGNMENT 
Create a 2D array and print the 2D array.

#include<stdio.h>
#include<stdlib.h>

int main()
{
   int i,j,m,n;
   printf("Enter the number of rows and columns respectively\n");
   scanf("%d%d",&m,&n);
   //printf("%d",m);
   int arr[m][n];
   printf("Enter the elements");
   for(i=0;i<m;i++)
   {
       for(j=0;j<n;j++)
       {
           scanf("%d",&arr[i][j]);
       }
   }
   for(i=0;i<m;i++)
   {
       for(j=0;j<n;j++)
       {
            printf("%d\t",arr[i][j]);

       }
       printf("\n");
   }
}
